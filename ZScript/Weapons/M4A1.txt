Class FPM4A1 : Inventory
{ Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 1; } }

Class M4A1Pickup : CustomInventory {
	Default {
		Inventory.PickupMessage "You got the M4A1 Carbine Assault Rifle!";
		Inventory.PickupSound "misc/w_pkup";
	}
	States
	{
	Spawn:
		M4CP A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_JumpIfInventory("M4A1",1,1);
		Goto Pickup+2;
		TNT1 A 0 A_JumpIfInventory("M4A1Ammo",200,"PFail");
		TNT1 A 0 A_GiveInventory("M4A1");
		TNT1 A 0 A_GiveInventory("FPM4A1",1);
		Stop;
	PFail:
		TNT1 A 0;
		fail;
	}
}

Class M4A1Drop : CustomInventory {
	Default {
		Inventory.PickupMessage "You got the M4A1 Carbine Assault Rifle!";
		Inventory.PickupSound "misc/w_pkup";
	}
	States
	{
	Spawn:
		M4CP A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_JumpIfInventory("M4A1",1,1);
		Goto Pickup+2;
		TNT1 A 0 A_JumpIfInventory("M4A1Ammo",200,"PFail");
		TNT1 A 0 A_GiveInventory("M4A1");
		TNT1 A 0 A_TakeInventory("M4A1Ammo",15);
		TNT1 A 0 A_GiveInventory("FPM4A1",1);
		Stop;
	PFail:
		TNT1 A 0;
		fail;
	}
}

Class M4A1 : PPGWeapon
{
	Default {
		Weapon.AmmoType1 "M4A1Ammo";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive1 30;
		Weapon.SlotNumber 4;
		Weapon.SelectionOrder 700;
		Inventory.Icon "m4a1icon";
//		AttackSound "m4a1/fire";
		Inventory.PickupMessage "You got the M4A1 Carbine Assault Rifle!";
		Obituary "%o underestimated %k's 'little friend'.";
	}
   States
   {
	Spawn:
		M4CP A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_GiveInventory("FPM4A1",1);
		Stop;
	Deselect:
		TNT1 A 0 {
			A_Overlay(M4A1F,"Null");
			A_Overlay(M4A1N,"Null");
			A_PlaySound("m4a1/holster",CHAN_AUTO);
		}
	Lower:
		TNT1 A 0 { 
			A_TakeInventory("RHSeq",9999);
			A_TakeInventory("PPGFistsPunchLeft",9999);
			A_TakeInventory("FistsInUse",9999);
			A_TakeInventory("WeaponInUse",9999);
			A_TakeInventory("SPInUse",9999);
			A_TakeInventory("SP6InUse",9999);
			A_TakeInventory("SP7InUse",9999);
		}
		M4CG A 1 A_Lower(12);
		Loop;
	Select:
		TNT1 A 0 {
			A_Overlay(M4A1N,"M4A1Ready");
			A_OverlayFlags(M4A1N,PPGWeapMove,true);
			A_PlaySound("m4a1/raise",CHAN_AUTO);
		}
	Raise:
		TNT1 A 0 { 
			A_TakeInventory("RHSeq",9999);
			A_TakeInventory("PPGFistsPunchLeft",9999);
			A_TakeInventory("FistsInUse",9999);
			A_TakeInventory("WeaponInUse",9999);
			A_TakeInventory("SPInUse",9999);
			A_TakeInventory("SP6InUse",9999);
			A_TakeInventory("SP7InUse",9999);
		}
		TNT1 A 1 A_Raise(12);
		Loop;
    Ready:
		TNT1 A 0 A_JumpIfNoAmmo("OutofAmmo");
    	TNT1 A 0 {
			if(!CheckInventory("WeaponInUse",1)
				&& !CheckInventory("SP7InUse",1)) {
				A_Overlay(M4A1N,"M4A1Ready",true);
				A_OverlayFlags(M4A1N,PPGWeapBob,true);
			}
		}
    	Goto ReadyLoop;
	ReadyLoop:
    	TNT1 A 1 {
			if(CheckInventory("WeaponInUse",1) || CheckInventory("SPInUse",1)) {
					if(CheckInventory("SP7InUse",1)) {
						A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
					}
					else if(CheckInventory("SPInUse",1)) {
						A_WeaponReady(WRF_ALLOWUSER2|WRF_DISABLESWITCH);
					}
					else {
						A_WeaponReady(WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_DISABLESWITCH);
					}
			}
			else {
				A_WeaponReady(WRF_ALLOWUSER1|WRF_ALLOWUSER2);	
			}
		}
    	Goto Ready;
   M4A1Deselect:
	  M4A1 A 7;
	  stop;
	M4A1Ready:
		M4CG A -1;
		Stop;
    Fire:
		TNT1 A 1 { 
			if(!CheckInventory("WeaponInUse",1)
				&& !CheckInventory("SP7InUse",1)) {
					A_Overlay(M4A1N,"Null");
					A_Overlay(M4A1F,"M4A1Fire");
			}
			if(CheckInventory("User1Refire",1)) {
				A_Overlay(SPower,"Superpowers");
			}
			if(CheckInventory("User2Refire",1)) {
				if(!CheckInventory("QuickKickInUse",1)) {
					A_Overlay(QKick,"QuickKick");
				}
			}
			// The following statements check if the player runs
			// out of ammo and jumps into a state to ensure that 
			// the firing animation finishes before entering back
			// into the Ready state to commence deselection. This
			// is for the purpose when the player uses fire and
			// altfire simultaneously. The first two actions caused 
			// problems and I only had to settle for the third.
			
			/*if(A_JumpIfNoAmmo("Null")) { <-- This crashes the game when
											   using alt.
				SetStateLabel("OutofAmmo");
			}
			
			A_JumpIfNoAmmo("OutofAmmo"); <-- Using this in the first frame
											 will still have the weapon jump 
											 to the Ready state.
			*/
		}
		TNT1 A 0 A_JumpIfNoAmmo("OutofAmmo"); // This is the working result,
											  // running in a separate frame.
		TNT1 A 0 A_JumpIfInventory("AttackRefire",1,"Hold");
		Goto Ready;
    Hold:
		TNT1 A 1 { 
			if(!CheckInventory("WeaponInUse",1)
				&& !CheckInventory("SP7InUse",1)) {
					A_Overlay(M4A1N,"Null");
					A_Overlay(M4A1F,"M4A1Hold");
			}
			if(CheckInventory("User1Refire",1)) {
				A_Overlay(SPower,"Superpowers");
			}
			if(CheckInventory("User2Refire",1)) {
				if(!CheckInventory("QuickKickInUse",1)) {
					A_Overlay(QKick,"QuickKick");
				}
			}
			// The following statements check if the player runs
			// out of ammo and jumps into a state to ensure that 
			// the firing animation finishes before entering back
			// into the Ready state to commence deselection. This
			// is for the purpose when the player uses fire and
			// altfire simultaneously. The first two actions caused 
			// problems and I only had to settle for the third.
			
			/*if(A_JumpIfNoAmmo("Null")) { <-- This crashes the game when
											   using alt.
				SetStateLabel("OutofAmmo");
			}
			
			A_JumpIfNoAmmo("OutofAmmo"); <-- Using this in the first frame
											 will still have the weapon jump 
											 to the Ready state.
			*/
		}
		TNT1 A 0 A_JumpIfNoAmmo("OutofAmmo"); // This is the working result,
											  // running in a separate frame.
		TNT1 A 0 A_JumpIfInventory("AttackRefire",1,"Hold");
		Goto Ready;
	OutofAmmo:
		TNT1 A 1 A_JumpIfNoAmmo(1);
		Goto Ready;
		TNT1 A 1 {
			if(!CheckInventory("WeaponInUse",1)) {
				A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			}
			if(!CheckInventory("WeaponInUse",1) 
				&& !CheckInventory("SPInUse",1) 
				&& !CheckInventory("QuickKickInUse",1)
				&& A_JumpIfNoAmmo("Null")) {
				A_CheckReload();
			}
			if(CheckInventory("User1Refire",1)) {
				A_Overlay(SPower,"Superpowers");
			}
		}
		Loop;
   M4A1Fire:
      160F A 0 BRIGHT {
			A_Light1();
			A_GiveInventory("WeaponInUse",1);
		}
	  M4CF A 1 BRIGHT Offset(2,2) {
			A_FireBullets(2,1,-1,8,"BulletPuff",1,1920);
			A_PlaySound("m4a1/fire",CHAN_WEAPON);
		}
      M4CF B 1 BRIGHT Offset(4,4) A_Light2();
      M4CG A 1 Offset(2,2) {
			A_Light0();
		}
		TNT1 A 0 Offset(0,0) {
			if(CheckInventory("WeaponInUse",1)) {
				A_Overlay(M4A1N,"M4A1Ready");
				A_OverlayFlags(M4A1N,PPGWeapBob,true);
			}
			A_TakeInventory("WeaponInUse",1);
		}
      Stop;
   M4A1Hold:
      160F A 0 BRIGHT {
			A_Light1();
			A_GiveInventory("WeaponInUse",1);
		}
	  M4CF A 1 BRIGHT Offset(2,2) {
			A_FireBullets(4,2,-1,8,"BulletPuff",1,1920);
			A_PlaySound("m4a1/fire",CHAN_WEAPON);
		}
      M4CF B 1 BRIGHT Offset(4,4) A_Light2();
      M4CG A 1 Offset(2,2) {
			A_Light0();
		}
		TNT1 A 0 Offset(0,0) {
			if(CheckInventory("WeaponInUse",1)) {
				A_Overlay(M4A1N,"M4A1Ready");
				A_OverlayFlags(M4A1N,PPGWeapBob,true);
			}
			A_TakeInventory("WeaponInUse",1);
		}
      Stop;
   FBHolster:
	  M4CG A 0 {
			A_GiveInventory("SPInUse",1);
			A_GiveInventory("SP7InUse",1);
			A_Overlay(M4A1N,"Null");
		}
	  "####" "#" 1 Offset(0,16);
	  "####" "#" 1 Offset(0,32);
	  "####" "#" 1 Offset(0,48);
	  "####" "#" 1 Offset(0,64);
	  "####" "#" 1 Offset(0,80);
	  "####" "#" 1 Offset(0,96);
	  "####" "#" 0 A_Overlay(SPower7,"BFRRaise");
	  Stop;
   FBRaise:
	  M4CG A 1 Offset(0,96);
	  "####" "#" 1 Offset(0,80);
	  "####" "#" 1 Offset(0,64);
	  "####" "#" 1 Offset(0,48);
	  "####" "#" 1 Offset(0,32);
	  "####" "#" 1 Offset(0,16);
	  "####" "#" 0 {
			A_TakeInventory("SPInUse",9999);
			A_TakeInventory("SP7InUse",9999);
			A_Overlay(M4A1N,"M4A1Ready");
			A_OverlayFlags(M4A1N,PPGWeapBob,true);
	  }
	  Stop;
   }
}

Class M4A1Ammo : Ammo
{
	Default {
		//$Category ammunition
		Inventory.PickupSound "m4a1/clipout";
		Inventory.PickupMessage "Picked up a 5.56mm Assault Rifle Clip.";
		Scale 0.75;
		Inventory.MaxAmount 200;
		Inventory.Amount	30;
		Ammo.BackpackAmount 15;
		Ammo.BackpackMaxAmount 200;
	}
	States
	{
	Spawn:
		M4CA A -1;
		Loop;
	}
}
